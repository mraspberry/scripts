#!/usr/bin/env python3

import argparse
import os
import subprocess
import sys

from github import Github


def in_git_repo():
    cmd = ("git", "rev-parse", "--show-toplevel", "HEAD")
    try:
        _ = subprocess.run(
            cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True
        )
    except subprocess.CalledProcessError:
        return False
    else:
        return True


def get_repo_info():
    cmd = ("git", "config", "--get", "remote.origin.url")
    try:
        status = subprocess.run(
            cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, check=True
        )
    except subprocess.CalledProcessError as cpe:
        sys.exit(f"Unable to determine repo. Output: '{cpe.stdout.decode()}'\n")
    remote_url = status.stdout.decode().strip().rstrip(".git")
    if remote_url.startswith("git@github.com:"):
        (owner, repo) = remote_url.split(":")[-1].split("/")
    elif remote_url.startswith("https://") and "github.com" in remote_url:
        (owner, repo) = remote_url.split("/")[-2:]
    else:
        sys.exit(f"Only Github is supported currently\n")
    return (owner, repo)


def get_branch():
    cmd = ("git", "rev-parse", "--abbrev-ref", "HEAD")
    try:
        status = subprocess.run(
            cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True
        )
    except subprocess.CalledProcessError as cpe:
        sys.exit(f"Unable to determine branch: Output '{cpe.stdout.decode()}'\n")
    else:
        return status.stdout.decode().strip()


def open_pr(args):
    github = Github(login_or_token=os.getenv("GH_TOKEN"))
    repo = github.get_repo("/".join(get_repo_info()))
    branch = get_branch()
    title = args.title or branch
    body = args.body or ""
    pr = repo.create_pull(
        title=title, body=body, head=branch, base=repo.default_branch, draft=args.draft
    )
    print("PR opened at", pr.html_url)
    if args.open:
        try:
            subprocess.run(
                ("open", pr.html_url),
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL,
                check=True,
            )
        except subprocess.CalledProcessError:
            sys.exit(f"Unable to open PR {pr.html_url} in browser\n")


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-t", "--title", help="Title of the Pull Request. Defaults to the branch name"
    )
    parser.add_argument("-b", "--body", help="Body of the Pull Request")
    parser.add_argument(
        "-d", "--draft", action="store_true", help="Make this Pull Request a draft"
    )
    parser.add_argument(
        "-o",
        "--open",
        action="store_true",
        help="Open the created PR in the default browser",
    )
    args = parser.parse_args()

    if not in_git_repo():
        sys.exit("Not in a git repository\n")

    open_pr(args)


if __name__ == "__main__":
    main()

# vim: set ft=py
